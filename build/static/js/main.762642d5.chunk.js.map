{"version":3,"sources":["api/UseCaver.js","../node_modules/caver-js/packages sync /^/.//.*//src//index/.js$","constants/constants.cypress.js","logo.svg","api/UseKlip.js","App.js","reportWebVitals.js","index.js"],"names":["option","headers","name","value","Buffer","from","ACCESS_KEY_ID","SECRET_KEY","toString","CHAIN_ID","caver","Caver","providers","HttpProvider","NFTContract","contract","KIP17ABI","NFT_CONTRACT_ADDRESS","fetchCardsOf","address","methods","balanceOf","call","balance","console","log","tokenIds","i","tokenOfOwnerByIndex","id","push","tokenUris","tokenURI","uri","nfts","getBalance","rpc","klay","then","response","utils","convertFromPeb","hexToNumberString","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","MARKET_CONTRACT_ADDRESS","A2P_API_PREPARE_URL","APP_NAME","isMobile","window","screen","width","getKlipAccessUrl","method","request_key","buyCard","tokenId","setQrvalue","callback","excuteContract","listingCard","fromAddress","mintCardWithURI","toAddress","txTo","functionJSON","params","axios","post","bapp","type","transaction","to","abi","data","location","href","timerId","setInterval","get","res","result","JSON","stringify","clearInterval","DEFAULT_ADDRESS","App","useState","setNfts","myBalance","setMyBalance","myAddress","setMyBAddress","qrvalue","tab","setTab","mintImageUrl","setMintImageUrl","showModal","setShowModal","title","onConfirm","modalProps","setModalProps","rows","slice","length","fetchMarketNFTs","_nfts","fetchMyNFTs","alert","onClickMint","randomTokenId","parseInt","Math","random","KlipAPI","onClickCard","onClickMyCard","onClickMarketCard","getUserData","klaytn_address","_balance","useEffect","className","style","backgroundColor","padding","Alert","onClick","variant","fontSize","Container","height","size","margin","rowIndex","Row","Col","marginRight","paddingRight","Card","Img","src","color","borderColor","Body","opacity","Form","Group","Control","onChange","target","placeholder","Button","Modal","centered","show","onHide","Header","border","Title","Footer","role","Nav","icon","faHome","faPlus","faWallet","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.762642d5.chunk.js","sourcesContent":["import Caver from \"caver-js\";\n//import CounterABI from \"../abi/CounterABI.json\";\nimport KIP17ABI from \"../abi/KIP17TokenABI.json\";\n\nimport {\n  COUNT_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n  MARKET_CONTRACT_ADDRESS,\n  ACCESS_KEY_ID,\n  SECRET_KEY,\n  CHAIN_ID,\n} from \"../constants\";\n\nconst option = {\n  // Kas API를 호출할 떄 필요한 파라미터, 인증이 되야 API사용할 수 있음\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_KEY).toString(\"base64\"),\n    },\n    { name: \"x-chain-id\", value: CHAIN_ID }, // 테스트넷이냐, 메인넷이냐\n  ],\n};\n\n// 누구한테 실행할지?\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    \"https://node-api.klaytnapi.com/v1/klaytn\",\n    option\n  )\n);\n\nconst NFTContract = new caver.contract(KIP17ABI, NFT_CONTRACT_ADDRESS);\n\nexport const fetchCardsOf = async (address) => {\n  // Fetch Balance : NFT카드 수\n  const balance = await NFTContract.methods.balanceOf(address).call();\n  console.log(`[NFT Balance] ${balance}`);\n\n  // Fetch Token IDs\n  const tokenIds = [];\n\n  for (let i = 0; i < balance; i++) {\n    const id = await NFTContract.methods.tokenOfOwnerByIndex(address, i).call();\n    tokenIds.push(id);\n  }\n  // Fetch Token URIs\n  const tokenUris = [];\n  for (let i = 0; i < balance; i++) {\n    const uri = await NFTContract.methods.tokenURI(tokenIds[i]).call();\n    tokenUris.push(uri);\n  }\n  console.log(`${tokenIds}`);\n  console.log(`${tokenUris[0]}`);\n  console.log(`${tokenUris[1]}`);\n\n  const nfts = [];\n  for (let i = 0; i < balance; i++) {\n    nfts.push({ uri: tokenUris[i], id: tokenIds[i] });\n  }\n  console.log(nfts);\n  return nfts;\n};\n\n// 잔고 조회\nexport const getBalance = (address) => {\n  // 특정 주소에 대한 잔고를 받아주세요.\n  return caver.rpc.klay.getBalance(address).then((response) => {\n    // 답변이 오면 우리가 읽을 수 있는 klay 단위로 변경해주세요. (convertFromPeb)\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(response)\n    );\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n};\n\n// 어디로가서?\n// const CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS)\n/*\n// 무엇을 실행?\n// smart contract의 값 불러오기\nexport const readCount = async () => {\n  const _count = await CountContract.methods.count().call();\n  console.log(_count);\n};\n\nexport const setCount = async (newCount) => {\n  // 사용할 account 설정\n  try {\n    // privatekey는 노출시키면 안됨. 유저한테 입력하게 하는 것도 좀...그렇다.\n    const privatekey = \"프라이빗 키 넣기\";\n    const deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n    caver.wallet.add(deployer);\n\n    // 스마트 컨트렉트 실행 트랜젝션 날리기\n    const receipt = await CountContract.methods.setCount(newCount).send({\n      from: deployer.address, //address\n      gas: \"0x4bfd200\", // 수수료는 아무 숫자나 넣어도 필요한 만큼만 사용하고 돌아옴\n    });\n\n    // 결과 확인\n    console.log(receipt);\n  } catch (e) {\n    console.log(`[ERROR_SET_COUNT] ${e}`);\n  }\n};\n*/\n","var map = {\n\t\"./caver-abi/src/index.js\": 129,\n\t\"./caver-account/src/index.js\": 73,\n\t\"./caver-contract/src/index.js\": 89,\n\t\"./caver-core-helpers/src/index.js\": 38,\n\t\"./caver-core-method/src/index.js\": 64,\n\t\"./caver-core-requestmanager/caver-providers-http/src/index.js\": 318,\n\t\"./caver-core-requestmanager/caver-providers-ipc/src/index.js\": 322,\n\t\"./caver-core-requestmanager/caver-providers-ws/src/index.js\": 317,\n\t\"./caver-core-requestmanager/src/index.js\": 315,\n\t\"./caver-core-subscriptions/src/index.js\": 119,\n\t\"./caver-core/src/index.js\": 51,\n\t\"./caver-ipfs/src/index.js\": 326,\n\t\"./caver-kct/src/index.js\": 390,\n\t\"./caver-klay/caver-klay-accounts/src/index.js\": 393,\n\t\"./caver-klay/caver-klay-personal/src/index.js\": 396,\n\t\"./caver-klay/src/index.js\": 397,\n\t\"./caver-middleware/src/index.js\": 208,\n\t\"./caver-net/src/index.js\": 250,\n\t\"./caver-rpc/src/index.js\": 398,\n\t\"./caver-rtm/src/index.js\": 125,\n\t\"./caver-transaction/src/index.js\": 399,\n\t\"./caver-utils/iban/src/index.js\": 310,\n\t\"./caver-utils/promievent/src/index.js\": 309,\n\t\"./caver-utils/src/index.js\": 10,\n\t\"./caver-validator/src/index.js\": 400,\n\t\"./caver-wallet/src/index.js\": 230\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 429;","export const COUNT_CONTRACT_ADDRESS =\n  \"0x071Daa3B2868BE449b74F6caaFA58AC850457f2c\";\nexport const NFT_CONTRACT_ADDRESS =\n  \"0x76350F65C70a8BA7632BE2d45A3e4835E177A198\"; //KIP17TOKEN contract address\nexport const MARKET_CONTRACT_ADDRESS =\n  \"0xc8D3b7Ea4f3e55eb417e33644D69fb731A1E766A\"; // NFTMarket\nexport const ACCESS_KEY_ID = \"KASKCM7BUJ7JZ7ITAUIOVHDH\";\nexport const SECRET_KEY = \"aLaGq2q4tvvTtPBaR3EAaTqi4Vu62zVCDBP7CKr8\";\nexport const CHAIN_ID = \"8217\"; // TEST NET (Baobab) 1001, MAIN NET 8217\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\nimport {\n  COUNT_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n  MARKET_CONTRACT_ADDRESS,\n} from \"../constants\";\n\nconst A2P_API_PREPARE_URL = \"https://a2a-api.klipwallet.com/v2/a2a/prepare\";\nconst APP_NAME = \"KLAY_MARKET\";\nconst isMobile = window.screen.width >= 1280 ? false : true;\n\nconst getKlipAccessUrl = (method, request_key) => {\n  if (method === \"QR\") {\n    return `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n  }\n  // PC가 아닌 경우 앱으로 연결\n  return `kakaotalk://klipwallet/open?url=https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n};\n\n// 구매\nexport const buyCard = async (tokenId, setQrvalue, callback) => {\n  const functionJson =\n    ' { \"constant\": false, \"inputs\": [ { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"NFTAddress\", \"type\": \"address\" } ], \"name\": \"buyNFT\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\" }';\n  excuteContract(\n    MARKET_CONTRACT_ADDRESS,\n    functionJson,\n    \"10000000000000000\", // 내가 팔 금액 (16진수 0.01klay)\n    `[\\\"${tokenId}\\\", \\\"${NFT_CONTRACT_ADDRESS}\\\"]`,\n    setQrvalue,\n    callback\n  );\n};\n\n// 판매 - 무조건 Market으로 보낼 거라서 to는 필요 없음\nexport const listingCard = async (\n  fromAddress,\n  tokenId,\n  setQrvalue,\n  callback\n) => {\n  const functionJson =\n    '{ \"constant\": false, \"inputs\": [ { \"name\": \"from\", \"type\": \"address\" }, { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n  excuteContract(\n    NFT_CONTRACT_ADDRESS,\n    functionJson,\n    \"0\",\n    `[\\\"${fromAddress}\\\", \\\"${MARKET_CONTRACT_ADDRESS}\\\", \\\"${tokenId}\\\"]`,\n    setQrvalue,\n    callback\n  );\n};\n\n// 민팅 기능\nexport const mintCardWithURI = async (\n  toAddress,\n  tokenId,\n  uri,\n  setQrvalue,\n  callback\n) => {\n  const functionJson =\n    '{ \"constant\": false, \"inputs\": [ { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"tokenURI\", \"type\": \"string\" } ], \"name\": \"mintWithTokenURI\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n  excuteContract(\n    NFT_CONTRACT_ADDRESS,\n    functionJson,\n    \"0\",\n    `[\\\"${toAddress}\\\", \\\"${tokenId}\\\", \\\"${uri}\\\"]`,\n    setQrvalue,\n    callback\n  );\n};\n\nexport const excuteContract = (\n  txTo,\n  functionJSON,\n  value,\n  params,\n  setQrvalue,\n  callback\n) => {\n  axios\n    .post(A2P_API_PREPARE_URL, {\n      // 지갑 사용해도 되니?\n      bapp: {\n        name: APP_NAME,\n      },\n      type: \"execute_contract\", // 스마트 컨트렉트 실행하겠다.\n      transaction: {\n        to: txTo, // 스마트컨드렉트 주소\n        abi: functionJSON, // 이 함수를 사용하겠다.\n        value: value, // 수수료 (알아서 계산되어 사용됨)\n        params: params, // 실헹할 함수의 파리미터는 이렇다.\n      },\n    })\n    .then((response) => {\n      const { request_key } = response.data; // 인증키\n      if (isMobile) {\n        window.location.href = getKlipAccessUrl(\"android\", request_key);\n      } else {\n        setQrvalue(getKlipAccessUrl(\"QR\", request_key));\n      }\n      // const qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n\n      let timerId = setInterval(() => {\n        // result값이 왔는지 매 초마다 확인\n        axios\n          .get(\n            `https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`\n          )\n          .then((res) => {\n            if (res.data.result) {\n              console.log(`[Result] ${JSON.stringify(res.data.result)}`);\n              callback(res.data.result);\n              clearInterval(timerId);\n              setQrvalue(\"DEFAULT\");\n            }\n          });\n      }, 1000);\n    });\n};\n\nexport const getAddress = (setQrvalue, callback) => {\n  axios\n    .post(A2P_API_PREPARE_URL, {\n      bapp: {\n        name: APP_NAME,\n      },\n      type: \"auth\",\n    })\n    .then((response) => {\n      const { request_key } = response.data;\n      if (isMobile) {\n        window.location.href = getKlipAccessUrl(\"android\", request_key);\n      } else {\n        setQrvalue(getKlipAccessUrl(\"QR\", request_key));\n      }\n      let timerId = setInterval(() => {\n        // result값이 왔는지 매 초마다 확인\n        axios\n          .get(\n            `https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`\n          )\n          .then((res) => {\n            if (res.data.result) {\n              console.log(`Result ${JSON.stringify(res.data.result)}`);\n              callback(res.data.result.klaytn_address);\n              // result값이 오면, 타이멍해제\n              clearInterval(timerId);\n              setQrvalue(\"DEFAULT\");\n            }\n          });\n      }, 1000);\n    });\n};\n\n/*\nexport const setCount = (count, setQrvalue) => {\n  axios\n    .post(A2P_API_PREPARE_URL, {\n      // 지갑 사용해도 되니?\n      bapp: {\n        name: APP_NAME,\n      },\n      type: \"execute_contract\", // 스마트 컨트렉트 실행하겠다.\n      transaction: {\n        to: COUNT_CONTRACT_ADDRESS, // 스마트컨드렉트 주소\n        abi: ' { \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }',\n        // 이 함수를 사용하겠다.\n        value: \"0\", // 수수료 (알아서 계산되어 사용됨)\n        params: `[\\\"${count}\"\\]`, // 실헹할 함수의 파리미터는 이렇다.\n      },\n    })\n    .then((response) => {\n      const { request_key } = response.data; // 인증키\n      const qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n      setQrvalue(qrcode);\n      let timerId = setInterval(() => {\n        // result값이 왔는지 매 초마다 확인\n        axios\n          .get(\n            `https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`\n          )\n          .then((res) => {\n            if (res.data.result) {\n              console.log(`Result ${JSON.stringify(res.data.result)}`);\n              if (res.data.result.status === \"success\") {\n                // result값이 오면, 타이멍해제\n                clearInterval(timerId);\n              }\n            }\n          });\n      }, 1000);\n    });\n};\n*/\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport QRCode from \"qrcode.react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faWallet, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { getBalance, readCount, setCount, fetchCardsOf } from \"./api/UseCaver\";\nimport * as KlipAPI from \"./api/UseKlip\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"./Market.css\";\nimport {\n  Alert,\n  Container,\n  Card,\n  Nav,\n  Form,\n  Button,\n  Modal,\n  Row,\n  Col,\n} from \"react-bootstrap\";\nimport { MARKET_CONTRACT_ADDRESS } from \"./constants\";\n\nfunction onPressButton(balance) {\n  console.log(\"hi\");\n}\n\nconst onPressButton2 = (_balance, _setBalance) => {\n  _setBalance(\"10\");\n};\n\nconst DEFAULT_QR_CODE = \"DEFAULT\";\nconst DEFAULT_ADDRESS = \"0x00000000000000000000000\";\n\nfunction App() {\n  const [nfts, setNfts] = useState([]); // {tokenId: '101', uri: ''}\n  const [myBalance, setMyBalance] = useState(\"0\");\n  const [myAddress, setMyBAddress] = useState(\"0x00000000000000000000000\");\n  // UI\n  const [qrvalue, setQrvalue] = useState(DEFAULT_QR_CODE);\n\n  // tab\n  const [tab, setTab] = useState(\"MARKET\"); // MARKET, MINT, WALLET\n  // mintInput\n  const [mintImageUrl, setMintImageUrl] = useState(\"\");\n\n  // Modal\n  const [showModal, setShowModal] = useState(false);\n  const [modalProps, setModalProps] = useState({\n    title: \"MODAL\",\n    onConfirm: () => {},\n  });\n\n  const rows = nfts.slice(nfts.length / 2);\n\n  // fetchMarketNFTs\n  const fetchMarketNFTs = async () => {\n    const _nfts = await fetchCardsOf(MARKET_CONTRACT_ADDRESS);\n    setNfts(_nfts);\n  };\n\n  // fetchMyNFTs\n  const fetchMyNFTs = async () => {\n    if (myAddress === DEFAULT_ADDRESS) {\n      alert(\"NO ADDRESS\");\n      return;\n    }\n    // [{tokenId:100, tokenUri : \"http://dgas.png\"}, {tokenId:101, tokenUri : \"http://ddasg.png\"}]\n    const _nfts = await fetchCardsOf(myAddress);\n    setNfts(_nfts);\n    // 배열에게 될 데이터 값은 'array'\n    // balanceOf -> 내가 가진 전체 NFT 토큰 개수 (2개)\n\n    // tokenOfOwnerByIndex -> 내가 가진 NFT token ID를 하나씩 가져온다 [배열로]\n    // 0x530E9237DF8E43ABF594e7145F96E9EDeD3e25F6, 0 => 100\n    // 0x530E9237DF8E43ABF594e7145F96E9EDeD3e25F6, 1 => 101\n\n    // tokenURI -> 앞에서 가져온 tokenID를 이용해서 toeknURI를 하나씩 가저온다.\n    // 100 -> qwerty.png\n    // 101 -> asdfg.png\n  };\n\n  // onClickkMint\n  const onClickMint = async (uri) => {\n    if (myAddress === DEFAULT_ADDRESS) {\n      alert(\"NO ADDRESS\");\n      return;\n    }\n\n    const randomTokenId = parseInt(Math.random() * 10000000);\n    KlipAPI.mintCardWithURI(\n      myAddress,\n      randomTokenId,\n      uri,\n      setQrvalue,\n      (result) => {\n        alert(JSON.stringify(result));\n      }\n    );\n  };\n\n  const onClickCard = (id) => {\n    if (tab === \"WALLET\") {\n      setModalProps({\n        title: \"NFT를 마켓에 올리시겠어요?\",\n        onConfirm: () => {\n          onClickMyCard(id);\n        },\n      });\n      setShowModal(true);\n    }\n    if (tab === \"MARKET\") {\n      setModalProps({\n        title: \"NFT를 구매하시겠어요?\",\n        onConfirm: () => {\n          onClickMarketCard(id);\n        },\n      });\n      setShowModal(true);\n    }\n  };\n\n  // onClickMyCard\n  const onClickMyCard = (tokenId) => {\n    KlipAPI.listingCard(myAddress, tokenId, setQrvalue, (result) => {\n      alert(JSON.stringify(result));\n    });\n  };\n\n  // onClickMarketCard\n  const onClickMarketCard = (tokenId) => {\n    KlipAPI.buyCard(tokenId, setQrvalue, (result) => {\n      alert(JSON.stringify(result));\n    });\n  };\n\n  // getUserData\n\n  const getUserData = () => {\n    setModalProps({\n      title: \"Klip 지갑을 연동하시겠습니까?\",\n      onConfirm: () => {\n        KlipAPI.getAddress(setQrvalue, async (address) => {\n          setMyBAddress(address);\n          const _balance = await getBalance(address);\n          setMyBalance(_balance);\n        });\n      },\n    });\n    setShowModal(true);\n  };\n  // getBalance(\"0x403e9fd0c8f9f5160d387b7a4b4940420e49bf21\");\n\n  // 앱에 처음 접속 했을 때, 일어날 기능들\n  useEffect(() => {\n    getUserData();\n    fetchMarketNFTs();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div style={{ backgroundColor: \"black\", padding: 10 }}>\n        <div>내 지갑</div>\n        {myAddress}\n        <br />\n        <Alert\n          onClick={getUserData}\n          variant={\"balance\"}\n          style={{ backgroundColor: \"lightblue\", fontSize: 25 }}\n        >\n          {myAddress !== DEFAULT_ADDRESS\n            ? `${myBalance} KLAY`\n            : \"지갑 연동하기\"}\n        </Alert>\n        {qrvalue !== \"DEFAULT\" ? (\n          <Container\n            style={{\n              backgroundColor: \"white\",\n              width: 300,\n              height: 300,\n              padding: 20,\n            }}\n          >\n            <QRCode value={qrvalue} size={256} style={{ margin: \"auto\" }} />\n          </Container>\n        ) : null}\n        <br />\n        <br />\n        {/* 갤러리(마켓 내 지갑) */}\n        {tab === \"MARKET\" || tab === \"WALLET\" ? (\n          <div className=\"container\" style={{ padding: 0, width: \"100%\" }}>\n            {rows.map((o, rowIndex) => (\n              <Row>\n                <Col style={{ marginRight: 0, paddingRight: 0 }}>\n                  <Card\n                    onClick={() => {\n                      onClickCard(nfts[rowIndex * 2].id);\n                    }}\n                  >\n                    <Card.Img src={nfts[rowIndex * 2].uri} />\n                  </Card>\n                  [{nfts[rowIndex * 2].id}]NFT\n                </Col>\n                <Col style={{ marginRight: 0, paddingRight: 0 }}>\n                  {nfts.length > rowIndex * 2 + 1 ? (\n                    <Card\n                      onClick={() => {\n                        onClickCard(nfts[rowIndex * 2 + 1].id);\n                      }}\n                    >\n                      <Card.Img src={nfts[rowIndex * 2 + 1].uri} />\n                    </Card>\n                  ) : null}\n                  {nfts.length > rowIndex * 2 + 1 ? (\n                    <>[{nfts[rowIndex * 2 + 1].id}]NFT</>\n                  ) : null}\n                </Col>\n              </Row>\n            ))}\n          </div>\n        ) : null}\n\n        {/* 발행 페이지 */}\n        {tab === \"MINT\" ? (\n          <div className=\"container\" style={{ padding: 0, width: \"100%\" }}>\n            <Card\n              className=\"text-center\"\n              style={{ color: \"black\", height: \"50%\", borderColor: \"#C5B358\" }}\n            >\n              <Card.Body style={{ opacity: 0.9, backgroundColor: \"black\" }}>\n                {mintImageUrl !== \"\" ? (\n                  <Card.Img src={mintImageUrl} height={\"50%\"} />\n                ) : null}\n                <Form>\n                  <Form.Group>\n                    <Form.Control\n                      value={mintImageUrl}\n                      onChange={(e) => {\n                        console.log(e.target.value);\n                        setMintImageUrl(e.target.value);\n                      }}\n                      type=\"text\"\n                      placeholder=\"이미지 주소를 입력해주세요\"\n                    />\n                  </Form.Group>\n                  <Button\n                    onClick={() => onClickMint(mintImageUrl)}\n                    variant=\"primary\"\n                    style={{\n                      backgroundColor: \"#810034\",\n                      borderColor: \"#810034\",\n                    }}\n                  >\n                    발행하기\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>\n          </div>\n        ) : null}\n      </div>\n      <br />\n      <br />\n      <br />\n      <br />\n      {/* 주소 잔고 */}\n      {/* <button onClick={fetchMyNFTs}>NFT가져오기</button> */}\n\n      {/* 모달 */}\n      <Modal\n        centered\n        size=\"sm\"\n        show={showModal}\n        onHide={() => {\n          setShowModal(false);\n        }}\n      >\n        <Modal.Header\n          style={{ border: 0, backgroundColor: \"black\", opacity: 0.8 }}\n        >\n          <Modal.Title>{modalProps.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Footer\n          style={{ border: 0, backgroundColor: \"black\", opacity: 0.8 }}\n        >\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              setShowModal(false);\n            }}\n          >\n            닫기\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              modalProps.onConfirm();\n              setShowModal(false);\n            }}\n            style={{ backgroundColor: \"#810034\", borderColor: \"#810034\" }}\n          >\n            진행\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      {/* 탭 */}\n      <nav\n        style={{ backgroundColor: \"#1b1717\", height: 45 }}\n        className=\"navbar fixed-bottom navbar-light\"\n        role=\"navigation\"\n      >\n        <Nav className=\"w-100\">\n          <div className=\"d-flex flex-row justify-content-around w-100\">\n            <div\n              onClick={() => {\n                setTab(\"MARKET\");\n                fetchMarketNFTs();\n              }}\n              className=\"row d-flex flex-column justify-content-center align-items-center\"\n            >\n              <div>\n                <FontAwesomeIcon color=\"white\" size=\"lg\" icon={faHome} />\n              </div>\n            </div>\n\n            <div\n              onClick={() => {\n                setTab(\"MINT\");\n              }}\n              className=\"row d-flex flex-column justify-content-center align-items-center\"\n            >\n              <div>\n                <FontAwesomeIcon color=\"white\" size=\"lg\" icon={faPlus} />\n              </div>\n            </div>\n\n            <div\n              onClick={() => {\n                setTab(\"WALLET\");\n                fetchMyNFTs();\n              }}\n              className=\"row d-flex flex-column justify-content-center align-items-center\"\n            >\n              <div>\n                <FontAwesomeIcon color=\"white\" size=\"lg\" icon={faWallet} />\n              </div>\n            </div>\n          </div>\n        </Nav>\n      </nav>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}